<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Snippet on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/code-snippet/</link>
    <description>Recent content in Code Snippet on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 May 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/code-snippet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[C#] A simple implementation of the WeakEvent pattern</title>
      <link>https://thomaslevesque.com/2010/05/17/c-a-simple-implementation-of-the-weakevent-pattern/</link>
      <pubDate>Mon, 17 May 2010 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2010/05/17/c-a-simple-implementation-of-the-weakevent-pattern/</guid>
      <description>As you probably know, incorrect usage of events is one of the main causes for memory leaks in .NET applications : an event keeps references to its listener objects (through a delegate), which prevents the garbage collector from collecting them when they&amp;rsquo;re not used anymore. This is especially true of static events, because the references are kept for all the lifetime of the application. If the application often adds handlers to the event and never removes them, the memory usage will grow as long as the application runs, until no more memory is available.</description>
    </item>
  </channel>
</rss>
