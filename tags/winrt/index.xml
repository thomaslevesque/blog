<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>winrt on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/winrt/</link>
    <description>Recent content in winrt on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Nov 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/winrt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[WinRT] Toggle selection of a list item on long press</title>
      <link>https://thomaslevesque.com/2013/11/21/winrt-toggle-selection-of-a-list-item-on-long-press/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2013/11/21/winrt-toggle-selection-of-a-list-item-on-long-press/</guid>
      <description>As you probably know, the standard way to select or deselect an item in a WinRT list control is to slide it up or down a little. Although I rather like this gesture, it’s not very intuitive for users unfamiliar with Modern UI. And it gets even more confusing, because my previous statement wasn’t perfectly accurate: in fact, you have to slide the item perpendicularly to the panning direction. In a GridView, which (by default) pans horizontally, that means up or down; but in a ListView, which pans vertically, you have to slide the item left or right.</description>
    </item>
    <item>
      <title>Strongly typed helper for toast notifications</title>
      <link>https://thomaslevesque.com/2013/11/10/strongly-typed-helper-for-toast-notifications/</link>
      <pubDate>Sun, 10 Nov 2013 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2013/11/10/strongly-typed-helper-for-toast-notifications/</guid>
      <description>Windows 8 provides an API for showing toast notifications. Unfortunately, it’s very cumbersome: to define the content of a notification, you must use a predefined template that is provided in the form of an XmlDocument, and set the value for each field in the XML. There is nothing in the API to let you know which fields the template defines, you need to check the toast template catalog in the documentation.</description>
    </item>
    <item>
      <title>Showing result suggestions in a WinRT SearchBox: bug regarding the image</title>
      <link>https://thomaslevesque.com/2013/11/04/showing-result-suggestions-in-a-winrt-searchbox-bug-regarding-the-image/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2013/11/04/showing-result-suggestions-in-a-winrt-searchbox-bug-regarding-the-image/</guid>
      <description>Today I ran into a strange problem that made me waste an hour or two, so I thought I’d write about it in case someone else faces the same issue.
The SearchBox control was introduced in Windows 8.1 to enable search scenarios from within a Windows Store app. One of its features is that it can show suggestions based on user input. There are three kinds of suggestions:
History suggestions are search queries previously entered by the user.</description>
    </item>
    <item>
      <title>Detecting dependency property changes in WinRT</title>
      <link>https://thomaslevesque.com/2013/04/21/detecting-dependency-property-changes-in-winrt/</link>
      <pubDate>Sun, 21 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2013/04/21/detecting-dependency-property-changes-in-winrt/</guid>
      <description>Today I’d like to share a trick I used while developing my first Windows Store application. I’m very new to this technology and it’s my first article about it, so I hope I won’t make a fool of myself…
It’s often useful to be notified when the value of a dependency property changes; many controls expose events for that purpose, but it’s not always the case. For instance, recently I was trying to detect when the Content property of a ContentControl changed.</description>
    </item>
  </channel>
</rss>
