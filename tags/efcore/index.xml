<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EFCore on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/efcore/</link>
    <description>Recent content in EFCore on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/efcore/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# 9 records as strongly-typed ids - Part 4: Entity Framework Core integration</title>
      <link>https://thomaslevesque.com/2020/12/23/csharp-9-records-as-strongly-typed-ids-part-4-entity-framework-core-integration/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2020/12/23/csharp-9-records-as-strongly-typed-ids-part-4-entity-framework-core-integration/</guid>
      <description>So far in this series, I showed how to use C# 9 records to declare strongly-typed ids as easily as this:&#xA;public record ProductId(int Value) : StronglyTypedId&amp;lt;int&amp;gt;(Value); I also explained how to make them work correctly with ASP.NET Core model binding and JSON serialization.&#xA;Today, I&amp;rsquo;ll present another piece of the puzzle: how to make Entity Framework core handle strongly-typed ids correctly.&#xA;Value conversion for a specific strongly-typed id Out of the box, EF Core doesn&amp;rsquo;t know anything about our strongly-typed ids.</description>
    </item>
  </channel>
</rss>
