<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>records on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/records/</link>
    <description>Recent content in records on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://thomaslevesque.com/tags/records/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C# 9 records as strongly-typed ids - Part 2: ASP.NET Core route and query parameters</title>
      <link>https://thomaslevesque.com/2020/11/23/csharp-9-records-as-strongly-typed-ids-part-2-aspnet-core-route-and-query-parameters/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2020/11/23/csharp-9-records-as-strongly-typed-ids-part-2-aspnet-core-route-and-query-parameters/</guid>
      <description>Last time, I explained how easy it is to use C# 9 record types as strongly-typed ids:
public record ProductId(int Value); But unfortunately, we&amp;rsquo;re not quite done yet: there are a few issues to fix before our strongly-typed ids are really usable. For instance, ASP.NET Core doesn&amp;rsquo;t know how to handle them in route parameters or query string parameters. In this post, I&amp;rsquo;ll show how to address this issue.
Model binding of route and query string parameters Let&amp;rsquo;s say we have an entity like this:</description>
    </item>
    
    <item>
      <title>Using C# 9 records as strongly-typed ids</title>
      <link>https://thomaslevesque.com/2020/10/30/using-csharp-9-records-as-strongly-typed-ids/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2020/10/30/using-csharp-9-records-as-strongly-typed-ids/</guid>
      <description>Strongly-typed ids Entities typically have integer, GUID or string ids, because those types are supported directly by databases. However, if all your entities have ids of the same type, it becomes pretty easy to mix them up, and use the id of a Product where the id of an Order was expected. This is actually a pretty common source of bugs.
public void AddProductToOrder(int orderId, int productId, int count) { .</description>
    </item>
    
  </channel>
</rss>