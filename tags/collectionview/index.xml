<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Collectionview on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/collectionview/</link>
    <description>Recent content in Collectionview on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Nov 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/collectionview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[WPF] Using Linq to shape data in a CollectionView</title>
      <link>https://thomaslevesque.com/2011/11/30/wpf-using-linq-to-shape-data-in-a-collectionview/</link>
      <pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2011/11/30/wpf-using-linq-to-shape-data-in-a-collectionview/</guid>
      <description>WPF provides a simple mechanism for shaping collections of data, via the ICollectionView interface and its Filter, SortDescriptions and GroupDescriptions properties:&#xA;// Collection to which the view is bound public ObservableCollection People { get; private set; } ... // Default view of the People collection ICollectionView view = CollectionViewSource.GetDefaultView(People); // Show only adults view.Filter = o =&amp;gt; ((Person)o).Age &amp;gt;= 18; // Sort by last name and first name view.SortDescriptions.Add(new SortDescription(&amp;#34;LastName&amp;#34;, ListSortDirection.</description>
    </item>
  </channel>
</rss>
