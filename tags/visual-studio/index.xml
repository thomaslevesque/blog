<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Studio on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/visual-studio/</link>
    <description>Recent content in Visual Studio on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Nov 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/visual-studio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Transform T4 templates as part of the build, and pass variables from the project</title>
      <link>https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/</guid>
      <description>T4 (Text Template Transformation Toolkit) is a great tool to generate code at design time; you can, for instance, create POCO classes from database tables, generate repetitive code, etc. In Visual Studio, T4 files (.tt extension) are associated with the TextTemplatingFileGenerator custom tool, which transforms the template to generate an output file every time you save the template. But sometimes it&amp;rsquo;s not enough, and you want to ensure that the template&amp;rsquo;s output is regenerated before build.</description>
    </item>
    <item>
      <title>Common MSBuild properties and items with Directory.Build.props</title>
      <link>https://thomaslevesque.com/2017/09/18/common-msbuild-properties-and-items-with-directory-build-props/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2017/09/18/common-msbuild-properties-and-items-with-directory-build-props/</guid>
      <description>To be honest, I never really liked MSBuild until recently. The project files generated by Visual Studio were a mess, most of their content was redundant, you had to unload the projects to edit them, it was poorly documented&amp;hellip; But with the advent of .NET Core and the new &amp;ldquo;SDK-style&amp;rdquo; projects, it&amp;rsquo;s become much, much better.&#xA;MSBuild 15 introduced a pretty cool feature: implicit imports (I don&amp;rsquo;t know if it&amp;rsquo;s the official name, but I&amp;rsquo;ll use it anyway).</description>
    </item>
    <item>
      <title>Testing and debugging library code from LINQPad</title>
      <link>https://thomaslevesque.com/2017/08/26/testing-and-debugging-library-code-from-linqpad/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2017/08/26/testing-and-debugging-library-code-from-linqpad/</guid>
      <description>I&amp;rsquo;ve been meaning to blog about LINQPad in a very long time. In case you don&amp;rsquo;t know about it, LINQPad is a tool that lets you write and test code very quickly without having to create a full-blown project in Visual Studio. It supports C#, VB.NET, F# and SQL. It was initially intended as an educational tool to experiment with LINQ (its author, Joe Albahari, developed it as companion to his C# in a Nutshell book), but it&amp;rsquo;s also extremely useful as a general-purpose .</description>
    </item>
    <item>
      <title>Tuples in C# 7</title>
      <link>https://thomaslevesque.com/2016/07/25/tuples-in-c-7/</link>
      <pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2016/07/25/tuples-in-c-7/</guid>
      <description>A tuple is an finite ordered list of values, of possibly different types, which is used to bundle related values together without having to create a specific type to hold them.&#xA;In .NET 4.0, a set of Tuple classes has been introduced in the framework, which can be used as follows:&#xA;private static Tuple&amp;lt;int, double&amp;gt; Tally(IEnumerable&amp;lt;double&amp;gt; values) { int count = 0; double sum = 0.0; foreach (var value in values) { count++; sum += value; } return Tuple.</description>
    </item>
    <item>
      <title>Test driving C# 7 features in Visual Studio “15” Preview</title>
      <link>https://thomaslevesque.com/2016/04/16/test-driving-c-7-features-in-visual-studio-15-preview/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2016/04/16/test-driving-c-7-features-in-visual-studio-15-preview/</guid>
      <description>About two weeks ago, Microsoft released the first preview of the next version of Visual Studio. You can read about what’s new in the release notes. Some of the new features are really nice (for instance I love the new “lightweight installer”), but the most interesting for me is that it comes with a version of the compiler that includes a few of the features planned for C# 7. Let’s have a closer look at them!</description>
    </item>
    <item>
      <title>Visual Studio Online &#43; Git integration with Team Explorer</title>
      <link>https://thomaslevesque.com/2014/10/12/visual-studio-online-git-integration-with-team-explorer/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2014/10/12/visual-studio-online-git-integration-with-team-explorer/</guid>
      <description>I recently started using Visual Studio Online for personal projects, and I must say it’s a pretty good platform, although it would be nice to be able to host public projects as well as private ones. The thing I like the most is the integration with Visual Studio Team Explorer to manage work items and builds.&#xA;However, I noticed a little gotcha when using Git for source control : the remote for VS Online must be named origin, otherwise Team Explorer won’t detect that it’s a VS Online project, and it won’t show the “Builds” and “Work items” pages.</description>
    </item>
    <item>
      <title>Running a custom tool automatically when a file is modified</title>
      <link>https://thomaslevesque.com/2013/11/14/running-a-custom-tool-automatically-when-a-file-is-modified/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2013/11/14/running-a-custom-tool-automatically-when-a-file-is-modified/</guid>
      <description>As far as I can remember, Visual Studio always had something called “custom tools”, also known as single-file generators. When you apply such a tool to a file in your project, it will generate something (typically code, but not necessarily) based on the content of the file. For instance, the default custom tool for resource files is called ResXFileCodeGenerator, and generates a class that provides easy access to the resources defined in the resx file.</description>
    </item>
    <item>
      <title>[VS2010] Binding support in InputBindings</title>
      <link>https://thomaslevesque.com/2009/10/26/vs2010-binding-support-in-inputbindings/</link>
      <pubDate>Mon, 26 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2009/10/26/vs2010-binding-support-in-inputbindings/</guid>
      <description>THE feature that was missing from WPF ! Visual Studio 2010 beta 2 has been released last week, and it brings to WPF a long awaited feature : support for bindings in InputBindings.&#xA;As a reminder, the issue in previous releases was that the Command property of the InputBinding class wasn&amp;rsquo;t a DependencyProperty, so it wasn&amp;rsquo;t possible to bind it. Furthermore, InputBindings didn&amp;rsquo;t inherit the parent DataContext, which made it difficult to provide alternative implementations&amp;hellip;</description>
    </item>
    <item>
      <title>[Visual Studio] Trick : make a project item a child item of another</title>
      <link>https://thomaslevesque.com/2009/03/05/visual-studio-trick-make-a-project-item-a-child-item-of-another/</link>
      <pubDate>Thu, 05 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2009/03/05/visual-studio-trick-make-a-project-item-a-child-item-of-another/</guid>
      <description>You probably noticed that, in a C# project tree, some items are placed &amp;ldquo;under&amp;rdquo; a parent item : it is the case, for instance, for files generated by a designer or wizard :&#xA;The following trick shows how to apply the same behavior to your own files.&#xA;Let&amp;rsquo;s assume that you want to customize the classes generated by the EDM designer. You can&amp;rsquo;t modify the Model1.designer.cs file, because you changes would be overwritten by the designer.</description>
    </item>
  </channel>
</rss>
