<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>build on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/build/</link>
    <description>Recent content in build on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://thomaslevesque.com/tags/build/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a project that target .NET Framework 4.5 in Visual Studio 2022</title>
      <link>https://thomaslevesque.com/2021/11/12/building-a-project-that-target-net-45-in-visual-studio-2022/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2021/11/12/building-a-project-that-target-net-45-in-visual-studio-2022/</guid>
      <description>I maintain a few libraries that still target .NET Framework 4.5 (among others). .NET 4.5 has long been out of support, but I try to keep supporting older frameworks in my libraries as long as it&amp;rsquo;s not a major inconvenience, because many people maintain old applications that can&amp;rsquo;t easily be updated to a newer framework.
Anyway, until recently, supporting .NET 4.5 wasn&amp;rsquo;t much of a problem, but today I hit a snag&amp;hellip; Before installing VS 2022 on my Surface Pro, I removed VS 2019 and old versions of .</description>
    </item>
    
    <item>
      <title>Transform T4 templates as part of the build, and pass variables from the project</title>
      <link>https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2017/11/13/transform-t4-templates-as-part-of-the-build-and-pass-variables-from-the-project/</guid>
      <description>T4 (Text Template Transformation Toolkit) is a great tool to generate code at design time; you can, for instance, create POCO classes from database tables, generate repetitive code, etc. In Visual Studio, T4 files (.tt extension) are associated with the TextTemplatingFileGenerator custom tool, which transforms the template to generate an output file every time you save the template. But sometimes it&amp;rsquo;s not enough, and you want to ensure that the template&amp;rsquo;s output is regenerated before build.</description>
    </item>
    
    <item>
      <title>Common MSBuild properties and items with Directory.Build.props</title>
      <link>https://thomaslevesque.com/2017/09/18/common-msbuild-properties-and-items-with-directory-build-props/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2017/09/18/common-msbuild-properties-and-items-with-directory-build-props/</guid>
      <description>To be honest, I never really liked MSBuild until recently. The project files generated by Visual Studio were a mess, most of their content was redundant, you had to unload the projects to edit them, it was poorly documented&amp;hellip; But with the advent of .NET Core and the new &amp;ldquo;SDK-style&amp;rdquo; projects, it&amp;rsquo;s become much, much better.
MSBuild 15 introduced a pretty cool feature: implicit imports (I don&amp;rsquo;t know if it&amp;rsquo;s the official name, but I&amp;rsquo;ll use it anyway).</description>
    </item>
    
  </channel>
</rss>
