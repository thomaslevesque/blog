<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Weak Event on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/weak-event/</link>
    <description>Recent content in Weak Event on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Aug 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/weak-event/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Weak events in C#, take two</title>
      <link>https://thomaslevesque.com/2015/08/16/weak-events-in-c-take-two/</link>
      <pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2015/08/16/weak-events-in-c-take-two/</guid>
      <description>A few years ago, I blogged about a generic implementation of the weak event pattern in C#. The goal was to mitigate the memory leaks associated with events when you forget to unsubscribe. The implementation was based on the use of weak references to the subscribers, to allow them to be garbage collected.&#xA;My initial solution was more a proof of concept than anything else, and had a major performance issue, due to the use of DynamicInvoke every time the event was raised.</description>
    </item>
    <item>
      <title>[C#] A simple implementation of the WeakEvent pattern</title>
      <link>https://thomaslevesque.com/2010/05/17/c-a-simple-implementation-of-the-weakevent-pattern/</link>
      <pubDate>Mon, 17 May 2010 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2010/05/17/c-a-simple-implementation-of-the-weakevent-pattern/</guid>
      <description>As you probably know, incorrect usage of events is one of the main causes for memory leaks in .NET applications : an event keeps references to its listener objects (through a delegate), which prevents the garbage collector from collecting them when they&amp;rsquo;re not used anymore. This is especially true of static events, because the references are kept for all the lifetime of the application. If the application often adds handlers to the event and never removes them, the memory usage will grow as long as the application runs, until no more memory is available.</description>
    </item>
  </channel>
</rss>
