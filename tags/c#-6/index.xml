<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# 6 on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/c#-6/</link>
    <description>Recent content in C# 6 on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://thomaslevesque.com/tags/c#-6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exception filters in C# 6: their biggest advantage is not what you think</title>
      <link>https://thomaslevesque.com/2015/06/21/exception-filters-in-c-6/</link>
      <pubDate>Sun, 21 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2015/06/21/exception-filters-in-c-6/</guid>
      <description>Exception filters are one of the major new features of C# 6. They take advantage of a CLR feature that was there from the start, but wasn’t used in C# until now. They allow you to specify a condition on a catch block:
static void Main() {  try  {  Foo.DoSomethingThatMightFail(null);  }  catch (MyException ex) when (ex.Code == 42)  {  Console.WriteLine(&amp;#34;Error 42 occurred&amp;#34;);  } } As you might expect, the catch block will be entered if and only if ex.</description>
    </item>
    
    <item>
      <title>Customizing string interpolation in C# 6</title>
      <link>https://thomaslevesque.com/2015/02/24/customizing-string-interpolation-in-c-6/</link>
      <pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2015/02/24/customizing-string-interpolation-in-c-6/</guid>
      <description>One of the major new features in C# 6 is string interpolation, which allows you to write things like this:
string text = $&amp;#34;{p.Name} was born on {p.DateOfBirth:D}&amp;#34;; A lesser known aspect of this feature is that an interpolated string can be treated either as a String, or as an IFormattable, depending on the context. When it is converted to an IFormattable, it constructs a FormattableString object that implements the interface and exposes:</description>
    </item>
    
    <item>
      <title>StringTemplate: another approach to string interpolation</title>
      <link>https://thomaslevesque.com/2014/11/17/stringtemplate-another-approach-to-string-interpolation/</link>
      <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://thomaslevesque.com/2014/11/17/stringtemplate-another-approach-to-string-interpolation/</guid>
      <description>With the upcoming version 6 of C#, there’s a lot of talk on CodePlex and elsewhere about string interpolation. Not very surprising, since it’s one of the major features of that release… In case you were living under a rock during the last few months and you haven’t heard about it, string interpolation is a way to insert C# expressions inside a string, so that they’re evaluated at runtime and replaced with their values.</description>
    </item>
    
  </channel>
</rss>
