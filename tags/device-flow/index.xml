<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Device Flow on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/device-flow/</link>
    <description>Recent content in Device Flow on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Mar 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/device-flow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using the OAuth 2.0 device flow to authenticate users in desktop apps</title>
      <link>https://thomaslevesque.com/2020/03/28/using-the-oauth-2-0-device-flow-to-authenticate-users-in-desktop-apps/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2020/03/28/using-the-oauth-2-0-device-flow-to-authenticate-users-in-desktop-apps/</guid>
      <description>Over the last few years, OpenID Connect has become one of the most common ways to authenticate users in a web application. But if you want to use it in a desktop application, it can be a little awkwardâ€¦&#xA;Authorization code flow OpenID Connect is an authentication layer built on top of OAuth 2.0, which means that you have to use one of the OAuth 2.0 authorization flows. A few years ago, there were basically two possible flows that you could use in a desktop client application to authenticate a user:</description>
    </item>
  </channel>
</rss>
