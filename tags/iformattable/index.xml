<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iformattable on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/iformattable/</link>
    <description>Recent content in Iformattable on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/iformattable/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Customizing string interpolation in C# 6</title>
      <link>https://thomaslevesque.com/2015/02/24/customizing-string-interpolation-in-c-6/</link>
      <pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2015/02/24/customizing-string-interpolation-in-c-6/</guid>
      <description>One of the major new features in C# 6 is string interpolation, which allows you to write things like this:&#xA;string text = $&amp;#34;{p.Name} was born on {p.DateOfBirth:D}&amp;#34;; A lesser known aspect of this feature is that an interpolated string can be treated either as a String, or as an IFormattable, depending on the context. When it is converted to an IFormattable, it constructs a FormattableString object that implements the interface and exposes:</description>
    </item>
  </channel>
</rss>
