<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>trampoline on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/trampoline/</link>
    <description>Recent content in trampoline on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Sep 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/trampoline/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tail recursion in C#</title>
      <link>https://thomaslevesque.com/2011/09/02/tail-recursion-in-c/</link>
      <pubDate>Fri, 02 Sep 2011 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2011/09/02/tail-recursion-in-c/</guid>
      <description>Regardless of the programming language you&amp;rsquo;re using, there are tasks for which the most natural implementation uses a recursive algorithm (even if it&amp;rsquo;s not always the optimal solution). The trouble with the recursive approach is that it can use a lot of space on the stack: when you reach a certain recursion depth, the memory allocated for the thread stack runs out, and you get a stack overflow error that usually terminates the process (StackOverflowException in .</description>
    </item>
  </channel>
</rss>
