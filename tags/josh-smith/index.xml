<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Josh Smith on Thomas Levesque&#39;s .NET Blog</title>
    <link>https://thomaslevesque.com/tags/josh-smith/</link>
    <description>Recent content in Josh Smith on Thomas Levesque&#39;s .NET Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Feb 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thomaslevesque.com/tags/josh-smith/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[WPF] Article about the Model-View-ViewModel design pattern, by Josh Smith</title>
      <link>https://thomaslevesque.com/2009/02/25/wpf-article-about-model-view-viewmodel-design-pattern-by-josh-smith/</link>
      <pubDate>Wed, 25 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://thomaslevesque.com/2009/02/25/wpf-article-about-model-view-viewmodel-design-pattern-by-josh-smith/</guid>
      <description>Soon after the release of WPF, people have been talking more and more about &amp;ldquo;Model-View-ViewModel&amp;rdquo; (MVVM). This expression refers to a design pattern, drawing its inspiration from the Model-View-Controller (MVC) and Presentation Model (PM) patterns, and created specifically to take advantage of WPF features. This patterns enables an excellent decoupling between data, behavior and presentation, which makes the code easier to understand and maintain, and improves the collaboration between developers and designers.</description>
    </item>
  </channel>
</rss>
